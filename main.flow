import runtime;
import lingo/pegcode/driver;
import maybe;
import string;

varDecl(name: Var, value: nemoType);
nemoType ::= intType, arrayType;
intType();
arrayType(type :string);

ArExpr ::= IntConst, Mul, Div, Add, Sub, Neg, Var;
Mul(left : ArExpr, right : ArExpr);
Div(left : ArExpr, right : ArExpr);
Add(left : ArExpr, right : ArExpr);
Sub(left : ArExpr, right : ArExpr);
Neg(arg : ArExpr);
IntConst(value : int);
Var(name : string);

HighPrior ::= ToMul, ToDiv;
LowPrior ::= ToAdd, ToSub;

ToMul(arg : ArExpr);
ToDiv(arg : ArExpr);
ToAdd(arg : ArExpr);
ToSub(arg : ArExpr);

grammarOp = compilePegGrammar("#include nemo.lingo");

specialPegActions = {
    pairs = [Pair("buildHigh", buildHigh), Pair("buildLow", buildLow)];
    t = setTreeValues(defaultPegActions.t, pairs);
    SemanticActions(t);
}


buildHigh(arr : [flow]) {
    fold(arr[1], arr[0], \acc, cur -> switch(cur) {
        ToMul(arg) : Mul(acc, arg);
        ToDiv(arg) : Div(acc, arg);
    })
}

buildLow(arr : [flow]) {
    fold(arr[1], arr[0], \acc, cur -> switch(cur) {
        ToAdd(arg) : Add(acc, arg);
        ToSub(arg) : Sub(acc, arg);
    })
}


parse(src : string) -> flow {
    parsic(grammarOp, src, specialPegActions);
}


main() {
    t1 = parse("kek := 1+3;");
    println(t1);
    if (t1 == flow("PARSING FAILED")) { quit(1); }  
    quit(0);
}